import test2 from "/test2.st7";
import test3 from "/test3.st7";

enum myenum2 {
    A(1), B(1), C(1), D(1);
    constructor myenum2(num:value);
}


class test {

    num:n;
    num: j = 5;
    const k = 5;
    var l = 5;
    const m = switch(a) {
       case 1: {return 4;}
       case 2..4: {return 3;}
       case 5: {return 2;}
       case 6: return 1;
       case {7, 9}: return 0;
    };
/*
    function testInvalidTypes(unknown:a, unknown2:b):unknown3 {
        unknown4:e = 0;
        var f = unknown5();
    }
*/

    function testVoidReturn() {}

    function testMethodCall() {

        testVoidReturn();
        testvoidreturn();

        testAssert(n,j);
        testAssert((1+2),(j+8));

        testPure();
        testGlobal();

        const testing = test();
        test.testPure();
        testing.testGlobal();
    }


    function testCast(num:a, num:b):num {
        cast (num:c = b) {
            return b + c;
        }

        cast (text:c = b) {
            return b + c;
        }
        return a;
    }

    function testAssert(num:a, num:b):num {
        assert a;
        assert b;

        return a + b;
    }
    
    function testIf(num:a, num:b):num {
        if (a) return b; else return c;
        if (d) return e; else { return f; }
        if (g) { return h; } else return i;
        if (j) { return k; } else { return l; }
        if (m) return n;
        if (o) {return p;}
        return 0;
    }

    function testTernary(num:a, num:b):num {
        const h = a ? b ? c : d : e ? f : g;
        const i = a ? a : b;
        return h ?: i;
    }

    function testBinaryOps(num:a, num:b):num {
        var x = 1;
        var y = 10;
        const z = 3.50;

        x =- y;
        x = y + 1;
        x++;
        ++y;

        x++ + ++x;

        return x + y;
    }

    function testBlocks(num:t, num:y):num {
        num:a = 0;
        {num:b = 0;}
        {num:b = 0;}
        {
            {num:c = 0;}
            {num:c = 0;}
        }
        return 0;
    }

    function testWhile(num:a, num:b):num {
        var x = 1;
        var y = 10;
        while(x < y);
        while(x < y) x++;
        while(x < y)
        while(x < y) {}
        while(x < y) {x++;}
        while(x < y) then return x;
        while(x < y) {x++;} then return x;
        while(x < y) {x++;} then {return x;}
        while(y-->x);
        return 0;
    }

    function testDo(num:a, num:b):num {
        var x = 1;
        var y = 10;
        do x++; while(x < y);
        do {x++;} while(x < y);
        do {x++;} while(x < y) then return x;
        do {x++;} while(x < y) then {return x;}
        return 0;
    }
    
    function testFor(num:a, num:b):num {
        var x = 1;
        var y = 10;
        for (;;);
        for (;;){}
        for (;;) then return x;
        for (;;){} then return x;
        for (;;){} then {return x;}
        for (;;){x++;} then {return x;}
        for (num: z;;);
        for (num:z = 0;;);
        for (;x < y;);
        for (;; x++);
        for (num:z = 0; z < x;);
        for (num:z = 0; z < x; z++);
        for (num:z = 0, num:a = 12; z < a; z++);
        return 0;
    }
    
    function testForeach(num:a, num:b):num {
        var x = 0..3;
        var y = List.of(a,b);
        var z = Stream.of(a,b);
        var w = Map.of(a,b);
        for (num:v : x);
        for (const v : y);
        for (var v : y);
        for (num:v : z);
        for (num:v, num:v2 : w);
        for (num:v : 0..3);
        for (num:v : List.of(w,b));
        for (num:v : Stream.of(w,b));
        for (num:v, num:v2 : Map.of(w, b));
        for (num:v : z) {} then {}
        for (num:v : 0..3) {} then {}
        return 0;
    }

    pure testPure(num:a, num:b):num {
        return a + b;
    }

    global testGlobal(num:a, num:b):num {
        return a + b;
    }

    /*
        this is some text
    */
    constructor test() {
        // blank const
    }

    constructor test(num:a);

    constructor test(num:a, num:b) {
        j = a;
        l = b;
    }
}

enum myenum {
    A, B, C, D;
}

enum myenum3 {
    A(3542, 1), B(1, 2), C("asd", 1), D("""asd
    some long text
    """, 1);
    constructor myenum3(object:val1, num:val2);
}


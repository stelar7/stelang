class myclass {

    int: a = 5;
    const b = 5;
    val c = 5;
    const d = switch(a) {
       case 1: {return 4;}
       case 2..4: {return 3;}
       case 5: {return 2;}
       case 6: return 1;
       case {7, 9}: return 0;
    };

    function testInvalidTypes(unknown:a, unknown2:b):unknown3 {
        unknown4:a = 0;
        val a = unknown5();
    }

    function testDuplicateMethod(int:a, int:b):int {}
    function testDuplicateMethod(int:a, int:b):int {}
    function testDuplicateMethod():int {}

    function testVoidReturn() {}

    function testAssert(int:a, int:b):int {
        assert a;
        assert b;

        return a + b;
    }
    
    function testIf(int:a, int:b):int {
        if (a) return b; else return c;
        if (d) return e; else { return f; }
        if (g) { return h; } else return i;
        if (j) { return k; } else { return l; }
        if (m) return n;
        if (o) {return p;}
    }

    function testTernary(int:a, int:b):int {
        return a ? b ? c : d : e ? f : g;
        return a ? a : b;
        return a ?: b;
    }

    function testBinaryOps(int:a, int:b):int {
        val x = 1;
        val y = 10;
        const z = 3.50;

        x =- y;
        x = y + 1;
        x++;
        ++y;

        x++ + ++x;

        return x + y;
        return x / y;
    }

    function testWhile(int:a, int:b):int {
        val x = 1;
        val y = 10;
        while(x < y);
        while(x < y) x++;
        while(x < y)
        while(x < y) {}
        while(x < y) {x++;}
        while(x < y) then return x;
        while(x < y) {x++;} then return x;
        while(x < y) {x++;} then {return x;}
        while(y-->x);
    }

    function testDo(int:a, int:b):int {
        val x = 1;
        val y = 10;
        do x++; while(x < y);
        do {x++;} while(x < y);
        do {x++;} while(x < y) then return x;
        do {x++;} while(x < y) then {return x;}
    }
    
    function testFor(int:a, int:b):int {
        val x = 1;
        val y = 10;
        for (;;);
        for (;;){}
        for (;;) then return x;
        for (;;){} then return x;
        for (;;){} then {return x;}
        for (;;){x++;} then {return x;}
        for (int: z;;);
        for (int:z = 0;;);
        for (;x < y;);
        for (;; x++);
        for (int:z = 0; z < x;);
        for (int:z = 0; z < x; z++);
        for (int:z = 0, int:a = 12; z < a; z++);
    }
    
    function testForeach(int:a, int:b):int {
        val x = 0..3;
        val y = List.of(a,b);
        val z = Stream.of(a,b);
        val a = Map.of(a,b);
        for (int:v : x);
        for (const v : y);
        for (val v : y);
        for (int:v : z);
        for (int:v, int:v2 : a);
        for (int:v : 0..3);
        for (int:v : List.of(a,b));
        for (int:v : Stream.of(a,b));
        for (int:v, int:v2 : Map.of(a, b));
        for (int:v : z) {} then {}
        for (int:v : 0..3) {} then {}
    }

    function testBlocks(int:a, int:b):int {
        int:a = 0;
        {int:b = 0;}
        {
            int:b = 0;

            {int:c = 0;}
            {int:c = 0;}

        }
    }

    pure testPure(int:a, int:b):int {
        return a + b;
    }

    global testGlobal(int:a, int:b):int {
        return a + b;
    }

    operator<=>(myclass:self, otherclass:other) {
        return myclass();
    }
}

import otherclass from "otherclass.st7";

enum myenum {
    A, B, C, D;
}

enum myenum2 {
    A(1), B(1), C(1), D(1);
    constructor myenum2(int:value);
}

enum myenum3 {
    A(3542, 1), B(1, ""), C("asd", 1), D("""asd
    some long text
    """, 1);
    constructor myenum3(object:val1, int:val2);
}

